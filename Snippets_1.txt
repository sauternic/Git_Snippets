******************************************************************************

Aenderungen Zeichenweise Anzeigen
=================================

git diff --color-words=.


******************************************************************************
******************************************************************************


Alle wichtigen Infos mit
========================

git branch -a
git branch -vv

git remote -v



******************************************************************************
******************************************************************************


Sich Retten bei unklaren merge Konfklikten:
Bei merge Konflikt abbrechen:

git merge --abort
=================


oder(wenn obiges nicht geht):
(weil 'Auto-merging')

git reset --hard head
=====================
oder
git reset head   und   git checkout .
=================================


Merke  =====>   Aber eigentlich nie schlimm, git schreibt was in die Datei rein, das kann man Anpassen
und Commiten!!! Fertig (Konflikt bereinigt).

Was reingeschrieben wurde ob von git wie oben, oder von mir gibt ne rote Datei(modified)
Bei (Auto)-merging Konflikten wird sie rot als 'both modified' bezeichnet.
                                                ==== 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
Mit den Dateien des Working Trees bzw. des Index vergleichen:

$ git diff                         # Vergleich Working Tree - Index
$ git diff [rev]                   # Vergleich Working Tree - [rev]
$ git diff --cached                # Vergleich Index - HEAD
$ git diff --cached [rev]          # Vergleich Index - [rev]

Revisionen vergleichen:

$ git diff [rev1] [rev2]           # Vergleich rev1 und rev2
$ git diff [rev1]..[rev2]          # Analog, Vergleich rev1 und rev2
$ git diff [rev1]..                # Vergleich rev1 und HEAD
$ git diff [rev1]..[rev2] -- src/  # Unterschiede in src/ zwischen rev1 und rev2

    Ausgabeformate: --stat, --shortstat, --name-status
    Unterschiede zeichenweise statt zeilenweise anzeigen: --word-diff
****************************************************************************************   


Hochladen:
git remote add origin https://github.com/sauternic/Test_Repo.git
git push -u origin master

Wichtiges:

Aus Überwachung nehmen:
git update-index --assume-unchanged <file> 


+++++++++++++++++++++++++++++++++++++   
Optionen:
z.B.
Kurzversion: -a   lang:   --all
Kurzversion: -m   lang:   --message
++++++++++++++++++++++++++++++++++++   


Listet alle Dateien die Überwacht werden auf
============================================

git ls-tree --full-tree -r HEAD


  

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   

Repository anlegen
==================

- cd <>

- git init
   => .git
(Enthält noch keine Verzeichnisse )

git add *.txt
  => bringt Dateien ins Repository

Erste Projektversion erstellen:
git commit --message "Dateien importiert"


Weiter mit:
git status
git diff

git log -n2


Add und Commit in einem Schritt:
Nur Dateien geändert ohne neue hizuzufügen.
> git commit --all --message "Aenderung1"
Oder:
> git commit *.txt --message "Aenderung2"


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   

******************************************************************      


Neuer branch erstellen:
git checkout -b neuerBranch1

'Wechsel' wieder zum Master:
git checkout master

Anzeigen:
git branch [-v](mit Kommentar)



******************************************************************   


Zusammenführen
==============

git checkout master
git merge neuerBranch1


Nutzlos gewordener branch löschen
=================================

git branch -d neuerBranch1


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    

Aenderungen im Working directory rückgängig machen bevor gestaged
(use "git checkout -- <file>..." to discard changes in working directory)
git checkout EntwicklungsGeschicht.txt

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    


**************************************************************************    

Letzter Commit rückgängig machen
================================

git reset --hard HEAD~1 

Andere Möglichkeit:
git revert <commit> (macht den angegeben Commit rückgängig mit einem neuen Commit)


==========================================================================    

Branch löschen
==============

$ git branch --delete pfeillinks
error: The branch 'pfeillinks' is not fully merged.
If you are sure you want to delete it, run 'git branch -D pfeillinks'.

==========================================================================    


Frage:
Ich möchte z.B. drei Versionen zurückspringen, ohne die nachfolgenden Versionen dabei zu verlieren. Wahlweise möchte ich die "nachfolgenden Versionen" auch killen und die Version, auf welche ich zurückgesprungen bin, als die aktuelle letzte Version behandeln. Wie ist das machbar? Was sieht git hier als Konzept vor?

Antwort:
1. Ermitteln der gewünschten Revision (in gitk oder in "git log" rausfischen)
2a. auf den Stand zurückspringen: git reset --hard revisionshash oder
2b. die alte Revision auschecken: git checkout revisionshash (Ergebnis nicht commitbar, muss zwangsläufig in einen anderen branch überführt werden)
3. einen Branch zum parallelen weiterarbeiten erstellen: git branch neuername

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""    

Stoppen von Überwachung
=======================

git update-index --assume-unchanged <datei>

Fortsetzten:

git update-index --no-assume-unchanged <file>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""    


*************************************************************************************    

Dateien aus der Überwachung
===========================

1. git rm --chached <file>
   - <file> ist wieder 'untracked'

2. <file> in  .gitignor  eintragen.

3. Mit  'git status'  Schauen ob verschwunden als untracked file?

[4. git commit -a -m "<file> aus Überwachung genommen"]
************************************************************************************* 
